{"version":3,"sources":["functions.js","Ticket.jsx","App.jsx","serviceWorker.js","index.js"],"names":["minutes","time","hours","departureTime","date","duration","Date","parse","arrivalTime","setMinutes","getMinutes","getUTCHours","stops","join","stopsCounter","counter","getTickets","url","arr","a","tickets","fetch","response","json","responseTickets","stop","console","log","filtration","filters","filter","ticket","oneTransfer","twoTransfers","threeTransfers","without","segments","length","applyFilters","slice","Item","this","props","className","price","toLocaleString","src","carrier","alt","origin","destination","normalize","Component","App","getRequest","setState","isLoading","responseID","searchId","ticketsForRender","toggleMenu","isMenuHiden","state","handleCheckbox","newFilter","target","id","all","filtered","buttonsState","handleSort","newTickets","sorted","sort","b","newButtonsState","mobileFilter","classNames","mobileMenu","mobileMenuOpened","leftButton","active","rightButton","onClick","type","checked","onChange","htmlFor","map","key","Math","random","toString","substr","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bc0e0e47.chunk.js","sourcesContent":["export const minutes = (time) => {\r\n    const minutes = time % 60;\r\n    const hours = (time - minutes) / 60;\r\n    const normalized = hours < 1 ? `${minutes}м` : `${hours}ч ${minutes}м`;\r\n    return normalized;\r\n}\r\n\r\nexport const departureTime = (date, duration) => {\r\n    const time = new Date(Date.parse(date));\r\n    const arrivalTime = new Date(time);\r\n    arrivalTime.setMinutes(time.getMinutes() + duration);\r\n    return `${time.getUTCHours()}:${time.getMinutes()} - ${arrivalTime.getUTCHours()}:${arrivalTime.getMinutes()}`;\r\n}\r\n\r\nexport const stops = (stops) => stops.join(', ');\r\n\r\nexport const stopsCounter = (counter) => {\r\n    if (counter === 1) {\r\n        return 'пересадка';\r\n    }\r\n    if (counter > 1 && counter < 5) {\r\n        return 'пересадки';\r\n    }\r\n    return 'пересадок';\r\n}\r\n\r\nexport const price = (cost) => cost.toLocaleString('ru-RU');\r\n\r\nexport const getTickets = async (url, arr) => {\r\n    let tickets = [];\r\n    try {\r\n        const response = await fetch(url);\r\n        const responseTickets = await response.json();\r\n        tickets = responseTickets.tickets;\r\n        if (responseTickets.stop) {\r\n            return [...arr, ...tickets];\r\n        }\r\n    } catch(err) {\r\n        console.log(err);\r\n        return await getTickets(url, arr);\r\n    }\r\n    return await getTickets(url, [...arr, ...tickets]);\r\n}\r\n\r\nexport const generateKey = () => Math.random().toString(36).substr(2, 9);\r\n\r\nconst applyFilters = (ticket, filters) => {\r\n    const { oneTransfer, twoTransfers, threeTransfers, without } = filters;\r\n    if (without && ticket.segments[0].stops.length === 0) {\r\n        return true;\r\n    } else if (oneTransfer && ticket.segments[0].stops.length === 1) {\r\n        return true;\r\n    } else if (twoTransfers && ticket.segments[0].stops.length === 2) {\r\n        return true;\r\n    } else if (threeTransfers && ticket.segments[0].stops.length === 3) {\r\n        return true;\r\n    } else if (!oneTransfer && !twoTransfers && !threeTransfers && !without) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport const filtration = (tickets, filters) => {\r\n    const filtered = tickets\r\n      .filter((ticket) => applyFilters(ticket, filters))\r\n      .slice(0, 5);\r\n    return filtered;\r\n  }","import React, { Component } from \"react\";\r\nimport * as normalize from \"./functions.js\";\r\nimport \"./Ticket.css\";\r\n\r\nexport default class Item extends Component {\r\n  render() {\r\n    const { ticket } = this.props;\r\n    return (\r\n      <div className=\"ticket\">\r\n        <div className=\"ticketHeader\">\r\n          <div className=\"price\">{normalize.price(ticket.price)} Р</div>\r\n          <img\r\n            className=\"companyLogo\"\r\n            src={`//pics.avs.io/99/36/${ticket.carrier}.png`}\r\n            alt=\"logo\"\r\n          />\r\n        </div>\r\n        <div className=\"routeInfo\">\r\n          <div className=\"route\">\r\n            <h3>\r\n              {ticket.segments[0].origin} - {ticket.segments[0].destination}\r\n            </h3>\r\n            <div className=\"routeDetails\">\r\n              {normalize.departureTime(\r\n                ticket.segments[0].date,\r\n                ticket.segments[0].duration\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"length\">\r\n            <h3>В пути</h3>\r\n            <div className=\"routeDetails\">\r\n              {normalize.minutes(ticket.segments[0].duration)}\r\n            </div>\r\n          </div>\r\n          <div className=\"stops\">\r\n            <h3>\r\n              {ticket.segments[0].stops.length}{\" \"}\r\n              {normalize.stopsCounter(ticket.segments[0].stops.length)}\r\n            </h3>\r\n            <div className=\"routeDetails\">\r\n              {normalize.stops(ticket.segments[0].stops)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"routeInfo\">\r\n          <div className=\"route\">\r\n            <h3>\r\n              {ticket.segments[1].origin} - {ticket.segments[1].destination}\r\n            </h3>\r\n            <div className=\"routeDetails\">\r\n              {normalize.departureTime(\r\n                ticket.segments[1].date,\r\n                ticket.segments[1].duration\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"length\">\r\n            <h3>В пути</h3>\r\n            <div className=\"routeDetails\">\r\n              {normalize.minutes(ticket.segments[1].duration)}\r\n            </div>\r\n          </div>\r\n          <div className=\"stops\">\r\n            <h3>\r\n              {ticket.segments[1].stops.length}{\" \"}\r\n              {normalize.stopsCounter(ticket.segments[1].stops.length)}\r\n            </h3>\r\n            <div className=\"routeDetails\">\r\n              {normalize.stops(ticket.segments[1].stops)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport classNames from \"classnames\";\nimport { getTickets, generateKey, filtration } from \"./functions.js\";\nimport \"./App.css\";\nimport Ticket from \"./Ticket.jsx\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tickets: null,\n      ticketsForRender: null,\n      isLoading: true,\n      isMenuHiden: true,\n      buttonsState: null,\n      filters: {\n        oneTransfer: false,\n        twoTransfers: false,\n        threeTransfers: false,\n        all: false,\n        without: false,\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.getRequest();\n  }\n\n  getRequest = async () => {\n    this.setState({ isLoading: true });\n    const responseID = await fetch(\n      \"https://front-test.beta.aviasales.ru/search\"\n    );\n    const searchId = await responseID.json();\n    const url = `https://front-test.beta.aviasales.ru/tickets?searchId=${searchId.searchId}`;\n    const tickets = await getTickets(url, []);\n    console.log(tickets);\n    this.setState({\n      tickets,\n      ticketsForRender: tickets.slice(0, 5),\n      isLoading: false,\n    });\n  };\n\n  toggleMenu = () => {\n    const { isMenuHiden } = this.state;\n    this.setState({ isMenuHiden: !isMenuHiden });\n  };\n\n  handleCheckbox = ({ target }) => {\n    const { filters, tickets } = this.state;\n    let newFilter;\n    if (target.id === \"all\") {\n      filters.all\n        ? (newFilter = {\n            all: false,\n            without: false,\n            oneTransfer: false,\n            twoTransfers: false,\n            threeTransfers: false,\n          })\n        : (newFilter = {\n            all: true,\n            without: true,\n            oneTransfer: true,\n            twoTransfers: true,\n            threeTransfers: true,\n          });\n    } else {\n      newFilter = { all: false, [target.id]: !filters[target.id] };\n    }\n    const filtered = filtration(tickets, { ...filters, ...newFilter });\n    this.setState({\n      filters: { ...filters, ...newFilter },\n      ticketsForRender: filtered,\n      buttonsState: null,\n    });\n  };\n\n  handleSort = ({ target }) => {\n    const { tickets, filters, buttonsState } = this.state;\n    if (buttonsState === target.id) {\n      this.setState({\n        buttonsState: null,\n        ticketsForRender: tickets.slice(0, 5),\n      });\n      return;\n    }\n    const newTickets = [...tickets];\n    const sorted =\n      target.id === \"cheapest\"\n        ? newTickets.sort((a, b) => a.price - b.price)\n        : newTickets.sort(\n            (a, b) => a.segments[0].duration - b.segments[0].duration\n          );\n    const filtered = filtration(sorted, filters);\n    const newButtonsState = target.id === \"cheapest\" ? \"cheapest\" : \"fastest\";\n    this.setState({\n      ticketsForRender: filtered,\n      buttonsState: newButtonsState,\n    });\n  };\n\n  render() {\n    const {\n      ticketsForRender,\n      isLoading,\n      isMenuHiden,\n      filters,\n      buttonsState,\n    } = this.state;\n    const mobileFilter = classNames({\n      filter: true,\n      mobileFilter: !isMenuHiden,\n    });\n\n    const mobileMenu = classNames({\n      mobileMenu: true,\n      mobileMenuOpened: !isMenuHiden,\n    });\n\n    const leftButton = classNames({\n      leftButton: true,\n      active: buttonsState === \"cheapest\",\n    });\n\n    const rightButton = classNames({\n      rightButton: true,\n      active: buttonsState === \"fastest\",\n    });\n    return (\n      <div id=\"container\">\n        <button className={mobileMenu} onClick={this.toggleMenu}></button>\n        <div className={mobileFilter}>\n          <div className=\"title\">Количество пересадок</div>\n          <form className=\"checkboxes\">\n            <div className=\"checkboxField\">\n              <input\n                id=\"all\"\n                type=\"checkbox\"\n                checked={filters.all}\n                onChange={this.handleCheckbox}\n              />\n              <label htmlFor=\"all\">Все</label>\n            </div>\n            <div className=\"checkboxField\">\n              <input\n                id=\"without\"\n                type=\"checkbox\"\n                checked={filters.without}\n                onChange={this.handleCheckbox}\n              />\n              <label htmlFor=\"without\">Без пересадок</label>\n            </div>\n            <div className=\"checkboxField\">\n              <input\n                id=\"oneTransfer\"\n                type=\"checkbox\"\n                checked={filters.oneTransfer}\n                onChange={this.handleCheckbox}\n              />\n              <label htmlFor=\"oneTransfer\">1 пересадка</label>\n            </div>\n            <div className=\"checkboxField\">\n              <input\n                id=\"twoTransfers\"\n                type=\"checkbox\"\n                checked={filters.twoTransfers}\n                onChange={this.handleCheckbox}\n              />\n              <label htmlFor=\"twoTransfers\">2 пересадки</label>\n            </div>\n            <div className=\"checkboxField\">\n              <input\n                id=\"threeTransfers\"\n                type=\"checkbox\"\n                checked={filters.threeTransfers}\n                onChange={this.handleCheckbox}\n              />\n              <label htmlFor=\"threeTransfers\">3 пересадки</label>\n            </div>\n          </form>\n        </div>\n        <div className=\"ticketsBlock\">\n          <div className=\"buttons\">\n            <button\n              id=\"cheapest\"\n              className={leftButton}\n              onClick={this.handleSort}\n            >\n              Самый дешевый\n            </button>\n            <button\n              id=\"fastest\"\n              className={rightButton}\n              onClick={this.handleSort}\n            >\n              Самый быстрый\n            </button>\n          </div>\n          <div className=\"tickets\">\n            {isLoading ? (\n              <div className=\"donut\"></div>\n            ) : (\n              ticketsForRender.map((ticket) => (\n                <Ticket key={generateKey()} ticket={ticket} />\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}